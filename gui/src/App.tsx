import { triggerAsyncId } from 'async_hooks';
import React, { useEffect, useMemo, useState } from 'react';
import './App.css';
import { useMediaStream } from './hooks/useMediaStream';
import { useSocket } from './hooks/useSocket';

const initialData = `293.0,315.7792541954257,0
293.77777777777777,315.08104767815644,0
294.55555555555554,314.4035612003201,0
295.33333333333337,313.74402242650126,0
296.1111111111111,313.09965902128454,0
296.8888888888889,312.46769864925494,0
297.66666666666663,311.8453689749969,0
298.44444444444446,311.22989766309524,0
299.22222222222223,310.61851237813477,0
300.0,310.0084407846999,0
300.77777777777777,309.3969105473757,0
301.55555555555554,308.78114933074653,0
302.33333333333337,308.1583847993974,0
303.1111111111111,307.52584461791287,0
303.8888888888889,306.881754213951,0
304.66666666666663,306.22833006746316,0
305.44444444444446,305.5687864214742,0
306.22222222222223,304.90633751900884,0
307.0,304.2441976030917,0
307.77777777777777,303.58558091674774,0
308.55555555555554,302.9337017030016,0
309.33333333333337,302.291774204878,0
310.1111111111111,301.6630126654017,0
310.8888888888889,301.0506313275975,0
311.66666666666663,300.45784443449014,0
312.44444444444446,299.8878662291043,0
313.22222222222223,299.3463293157341,0
314.0,298.8485397437505,0
314.77777777777777,298.4122219237938,0
315.55555555555554,298.05510026650416,0
316.33333333333337,297.79365575205816,0
317.1111111111111,297.63939563877625,0
317.8888888888889,297.6025837545154,0
318.66666666666663,297.6857341264032,0
319.44444444444446,297.86036157864964,0
320.22222222222223,298.09023113473586,0
321.0,298.33910781814285,0
321.77777777777777,298.5707566523514,0
322.55555555555554,298.7489426608427,0
323.33333333333337,298.8267066169078,0
324.1111111111111,298.71419229307855,0
324.8888888888889,298.3108192116971,0
325.66666666666663,297.5160068951054,0
326.44444444444446,296.2291748656457,0
327.22222222222223,294.34974264566,0
328.0,291.90005204598583,0
328.77777777777777,289.394134031443,0
329.55555555555554,287.42451167565906,0
330.33333333333337,286.2920303941151,0
331.1111111111111,285.79727766502054,0
331.8888888888889,285.6268840271888,0
332.66666666666663,285.519603614689,0
333.44444444444446,285.42268494261407,0
334.22222222222223,285.335500121313,0
335.0,285.2574212611346,0
335.77777777777777,285.1878204724277,0
336.55555555555554,285.12606986554124,0
337.33333333333337,285.071541550824,0
338.1111111111111,285.0236076386249,0
338.8888888888889,284.98164023929286,0
339.66666666666663,284.9450114631767,0
340.44444444444446,284.9130934206253,0
341.22222222222223,284.8852582219873,0
342.0,284.86087797761195,0
342.77777777777777,284.8393247978479,0
343.55555555555554,284.81997079304404,0
344.33333333333337,284.80218807354925,0
345.1111111111111,284.7853487497124,0
345.8888888888889,284.76882493188236,0
346.66666666666663,284.751988730408,0
347.44444444444446,284.7342122556381,0
348.22222222222223,284.7148676179217,0
349.0,284.6933269276076,0
349.77777777777777,284.66896229504454,0
350.55555555555554,284.64114583058154,0
351.33333333333337,284.6092496445674,0
352.1111111111111,284.57264584735094,0
352.8888888888889,284.53070654928115,0
353.66666666666663,284.4828038607069,0
354.44444444444446,284.4283098919768,0
355.22222222222223,284.36659675344004,0
356.0,284.29703655544535,0
356.77777777777777,284.21900140834157,0
357.55555555555554,284.13186342247764,0
358.3333333333333,284.03499470820236,0
359.1111111111111,283.9277673758646,0
359.8888888888889,283.80955353581334,0
360.6666666666667,283.6797252983973,0
361.44444444444446,283.5376547739653,0
362.22222222222223,283.3827140728664,0
363.0,283.2142753054494,0
363.77777777777777,283.0317105820631,0
364.55555555555554,282.83439201305646,0
365.3333333333333,282.6216917087783,0
366.1111111111111,282.39298177957744,0
366.8888888888889,282.14763433580276,0
367.6666666666667,281.8850214878032,0
368.44444444444446,281.60451534592767,0
369.22222222222223,281.3054880205249,0
370.0,280.9873116219437,0`
    .split('\n')
    .map((line) => line.split(','));

function App() {
    const [lastMessage, setLastMessage] = useState<string[][]>([]);
    const messageCallback = useMemo(
        () => (message: MessageEvent) => {
            const arr = message.data.split('\n');
            arr.shift();
            const items: string[][] = arr.map((line: string) =>
                line.split(',')
            );
            setLastMessage(items);
        },
        []
    );
    const [send, socketState] = useSocket(messageCallback);

    const [streamState, streamModifiers] = useMediaStream();

    useEffect(() => {
        if (streamState.getFrame === undefined || !socketState.isOpen) {
            return;
        }
        //@ts-ignore
        window.getFrame = streamState.getFrame;
        streamState.getFrame((blob: Blob | null) => {
            if (!blob) {
                return;
            }
            send(blob);
        });
    }, [streamState.getFrame, socketState.isOpen, lastMessage]);

    const lowestX = Math.min.apply(
        Math,
        lastMessage.map((m) => +m[0])
    );
    const highestX = Math.max.apply(
        Math,
        lastMessage.map((m) => +m[0])
    );
    const lowestY = Math.min.apply(
        Math,
        lastMessage.map((m) => +m[1])
    );
    const highestY = Math.max.apply(
        Math,
        lastMessage.map((m) => +m[1])
    );

    return (
        <div className="App">
            {streamState.Video ? streamState.Video : null}
            <svg
                width="500"
                height="375"
                viewBox={`${lowestX} ${lowestY} ${highestX - lowestX} ${
                    highestY - lowestY
                }`}
            >
                <path
                    strokeWidth="3"
                    stroke="black"
                    fill="none"
                    d={`M ${lastMessage
                        .map((item) => [item[0], item[1]].join(','))
                        .join(' L ')}`}
                />
            </svg>

            <button onClick={streamModifiers.prompt}>Get window</button>
        </div>
    );
}

export default App;
